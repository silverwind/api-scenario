// Code generated by "enumer -type=Source -json -linecomment -output source_gen.go"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

const _SourceName = "response_statusresponse_timeresponse_jsonresponse_headerresponse_textresponse_xml"

var _SourceIndex = [...]uint8{0, 15, 28, 41, 56, 69, 81}

func (i Source) String() string {
	if i < 0 || i >= Source(len(_SourceIndex)-1) {
		return fmt.Sprintf("Source(%d)", i)
	}
	return _SourceName[_SourceIndex[i]:_SourceIndex[i+1]]
}

var _SourceValues = []Source{0, 1, 2, 3, 4, 5}

var _SourceNameToValueMap = map[string]Source{
	_SourceName[0:15]:  0,
	_SourceName[15:28]: 1,
	_SourceName[28:41]: 2,
	_SourceName[41:56]: 3,
	_SourceName[56:69]: 4,
	_SourceName[69:81]: 5,
}

// SourceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SourceString(s string) (Source, error) {
	if val, ok := _SourceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Source values", s)
}

// SourceValues returns all values of the enum
func SourceValues() []Source {
	return _SourceValues
}

// IsASource returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Source) IsASource() bool {
	for _, v := range _SourceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Source
func (i Source) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Source
func (i *Source) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Source should be a string, got %s", data)
	}

	var err error
	*i, err = SourceString(s)
	return err
}
