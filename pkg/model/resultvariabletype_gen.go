// Code generated by "enumer -type=ResultVariableType -json -linecomment -output resultvariabletype_gen.go"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

const _ResultVariableTypeName = "VariableSet"

var _ResultVariableTypeIndex = [...]uint8{0, 8, 11}

func (i ResultVariableType) String() string {
	if i < 0 || i >= ResultVariableType(len(_ResultVariableTypeIndex)-1) {
		return fmt.Sprintf("ResultVariableType(%d)", i)
	}
	return _ResultVariableTypeName[_ResultVariableTypeIndex[i]:_ResultVariableTypeIndex[i+1]]
}

var _ResultVariableTypeValues = []ResultVariableType{0, 1}

var _ResultVariableTypeNameToValueMap = map[string]ResultVariableType{
	_ResultVariableTypeName[0:8]:  0,
	_ResultVariableTypeName[8:11]: 1,
}

// ResultVariableTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResultVariableTypeString(s string) (ResultVariableType, error) {
	if val, ok := _ResultVariableTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResultVariableType values", s)
}

// ResultVariableTypeValues returns all values of the enum
func ResultVariableTypeValues() []ResultVariableType {
	return _ResultVariableTypeValues
}

// IsAResultVariableType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResultVariableType) IsAResultVariableType() bool {
	for _, v := range _ResultVariableTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ResultVariableType
func (i ResultVariableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ResultVariableType
func (i *ResultVariableType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ResultVariableType should be a string, got %s", data)
	}

	var err error
	*i, err = ResultVariableTypeString(s)
	return err
}
