// Code generated by "enumer -type=Comparison -json -linecomment -output comparison_gen.go"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

const _ComparisonName = "equal_numberequalnot_equalis_a_numberis_less_thanis_less_than_or_equalsis_greater_thanis_greater_than_or_equalcontainsdoes_not_containnot_emptyemptyis_nullhas_valuehas_key"

var _ComparisonIndex = [...]uint8{0, 12, 17, 26, 37, 49, 71, 86, 110, 118, 134, 143, 148, 155, 164, 171}

func (i Comparison) String() string {
	if i < 0 || i >= Comparison(len(_ComparisonIndex)-1) {
		return fmt.Sprintf("Comparison(%d)", i)
	}
	return _ComparisonName[_ComparisonIndex[i]:_ComparisonIndex[i+1]]
}

var _ComparisonValues = []Comparison{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

var _ComparisonNameToValueMap = map[string]Comparison{
	_ComparisonName[0:12]:    0,
	_ComparisonName[12:17]:   1,
	_ComparisonName[17:26]:   2,
	_ComparisonName[26:37]:   3,
	_ComparisonName[37:49]:   4,
	_ComparisonName[49:71]:   5,
	_ComparisonName[71:86]:   6,
	_ComparisonName[86:110]:  7,
	_ComparisonName[110:118]: 8,
	_ComparisonName[118:134]: 9,
	_ComparisonName[134:143]: 10,
	_ComparisonName[143:148]: 11,
	_ComparisonName[148:155]: 12,
	_ComparisonName[155:164]: 13,
	_ComparisonName[164:171]: 14,
}

// ComparisonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparisonString(s string) (Comparison, error) {
	if val, ok := _ComparisonNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Comparison values", s)
}

// ComparisonValues returns all values of the enum
func ComparisonValues() []Comparison {
	return _ComparisonValues
}

// IsAComparison returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Comparison) IsAComparison() bool {
	for _, v := range _ComparisonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Comparison
func (i Comparison) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Comparison
func (i *Comparison) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Comparison should be a string, got %s", data)
	}

	var err error
	*i, err = ComparisonString(s)
	return err
}
