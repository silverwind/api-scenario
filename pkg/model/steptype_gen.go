// Code generated by "enumer -type=StepType -json -linecomment -output steptype_gen.go"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

const _StepTypeName = "pauserequest"

var _StepTypeIndex = [...]uint8{0, 5, 12}

func (i StepType) String() string {
	if i < 0 || i >= StepType(len(_StepTypeIndex)-1) {
		return fmt.Sprintf("StepType(%d)", i)
	}
	return _StepTypeName[_StepTypeIndex[i]:_StepTypeIndex[i+1]]
}

var _StepTypeValues = []StepType{0, 1}

var _StepTypeNameToValueMap = map[string]StepType{
	_StepTypeName[0:5]:  0,
	_StepTypeName[5:12]: 1,
}

// StepTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StepTypeString(s string) (StepType, error) {
	if val, ok := _StepTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StepType values", s)
}

// StepTypeValues returns all values of the enum
func StepTypeValues() []StepType {
	return _StepTypeValues
}

// IsAStepType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StepType) IsAStepType() bool {
	for _, v := range _StepTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StepType
func (i StepType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StepType
func (i *StepType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StepType should be a string, got %s", data)
	}

	var err error
	*i, err = StepTypeString(s)
	return err
}
